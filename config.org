#+STARTUP: show2levels
#+PROPERTY: header-args:emacs-lisp :tangle init.el

* 前置设定与启动
** lexical binding
#+begin_src emacs-lisp
  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
#+end_src
** garbage collection
#+begin_src emacs-lisp
  (let ((normal-gc-cons-threshold (* 20 1024 1024))
        (init-gc-cons-threshold (* 128 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
#+end_src

** 自动 tangle config.org 文件
#+begin_src emacs-lisp
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "config.org" user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

** 设置包仓库
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu"    . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                           ("nongnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                           ("melpa"  . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
  (package-initialize)
#+end_src

** use-package
#+begin_src emacs-lisp
  ;; 安装 use-package, emacs30.1 内置 use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

** 加载 =custom.el= 中的自定义设置
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** 设定源码加载路径(目前用不上，先取消)
#+begin_src emacs-lisp :tangle no
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** 云盘文件夹
因为有多个电脑一起使用，所以检测云盘文件夹位置
#+begin_src emacs-lisp
  (defconst my-cloud-dir
    (cond
     ((file-directory-p "D:/Seafile/")
      "D:/Seafile/")
     ((file-directory-p "~/Seafile")
      "~/Seafile")))
#+end_src

* 编辑器功能
** 基本功能设置
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq confirm-kill-emacs #'yes-or-no-p) ; 在关闭 Emacs 前询问是否确认关闭，防止误触
  (setq visible-bell t)                   ; 使用屏幕闪烁替代提示音
  (setq make-backup-files nil)            ; 关闭文件自动备份
  (fset 'yes-or-no-p 'y-or-n-p)           ; 设置 yes or no 别名

  ;; 自动更新 buffer
  (global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers nil)
#+end_src
** 临时文件管理(no-littering)
用 =no-littering= 保持文件夹整洁
#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t)
#+end_src
** 最近文件(Recent Files)
#+begin_src emacs-lisp
  (use-package recentf
    :after no-littering
    :demand t 
    :custom
    (recentf-exclude '(no-littering-var-directory
                       no-littering-etc-directory)) ; 屏蔽临时文件
    (recentf-max-menu-items 25)
    (recentf-max-saved-items 25)
    :bind ("C-x C-r" . 'recentf-open-files)
    :config
    (recentf-mode 1))
#+end_src
** 保存历史命令 (savehist)
#+begin_src emacs-lisp
  (use-package savehist
    :defer t
    :hook (after-init . savehist-mode)
    :config
    (setq enable-recursive-minibuffers t
  	    history-length 1000
  	    savehist-autosave-interval 300
  	    savehist-additional-variables '(mark-ring
  					                    global-mark-ring
  					                    search-ring
  					                    regexp-search-ring)))
#+end_src

** 保存光标位置 (save-place)
#+begin_src emacs-lisp
  (use-package save-place
    :defer t
    :hook
    (after-init . save-place-mode))
#+end_src

** 自动保存文件 (super-save)
#+begin_src emacs-lisp
  (use-package super-save
    :defer 1
    :hook
    (after-init . super-save-mode)
    :custom
    (super-save-auto-save-when-idle t))
#+end_src

** 按键提示 (which-key)
#+begin_src emacs-lisp
  (use-package which-key
    :defer 1
    :config
    ;; 启用 which-key
    (which-key-mode 1)

    ;; 显示延迟（秒），0.5 秒后出现提示
    (setq which-key-idle-delay 0.5))
#+end_src
* 界面
** 主题
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+end_src
** 状态栏
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (emacs-startup . doom-modeline-mode))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-banner-logo-title "Welcome to Emacs!") ;; 个性签名，随读者喜好设置
    ;; (setq dashboard-projects-backend 'projectile) ;; 读者可以暂时注释掉这一行，等安装了 projectile 后再使用
    (setq dashboard-startup-banner 'official) ;; 也可以自定义图片
    (setq dashboard-items '((recents  . 5)   ;; 显示多少个最近文件
     		                  (bookmarks . 5)  ;; 显示多少个最近书签
     		                  (projects . 10))) ;; 显示多少个最近项目
    (dashboard-setup-startup-hook))
#+end_src

** 字体
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "SauceCodePro NF-15"))

  (defun my/setup-cjk-font-for-frame (frame)
    "为指定的框架 FRAME 设置中日韩（CJK）字符字体。"
    (with-selected-frame frame
      (set-fontset-font t (cons #x4e00 #x9fff) (font-spec :family "等线"))))

  (add-hook 'after-make-frame-functions #'my/setup-cjk-font-for-frame)

  (when (display-graphic-p)
    (my/setup-cjk-font-for-frame (selected-frame)))
#+end_src

** 显示文件大小 (simple)
#+begin_src emacs-lisp
  (use-package simple
    :hook (after-init . size-indication-mode)
    :init
    (setq column-number-mode t))
#+end_src
** 窗口
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(width . 70))
  (add-to-list 'default-frame-alist '(height . 32))
  ;; (setq frame-inhibit-implied-resize t)             ; Prevent frames from resizing based on content.

  (scroll-bar-mode -1)   ; 关闭滚动条
  (tool-bar-mode -1)     ; 关闭工具栏
  ;; (menu-bar-mode -1)     ; 关闭菜单栏
#+end_src
** 光标样式
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
#+end_src
** 行号，列号与换行
#+begin_src emacs-lisp
  (column-number-mode t)                ; 显示列号
  (global-display-line-numbers-mode 1)  ; 显示行号
  (global-visual-line-mode t)           ; 自动折行
  ;; 不显示行号的模式:
  (dolist (mode '(term-mode-hook
                  helpful-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook
                  eww-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
* 文本编辑
** 默认编码
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
#+end_src
** 基本编辑设置
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)   ; 编程模式下，可以折叠代码块
  (delete-selection-mode t)                    ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）
  (setq-default indent-tabs-mode nil)          ; Use spaces instead of tabs for indentation.
  (setq-default tab-width 4)                   ; tab 宽度
  (setq require-final-newline t)               ; 文件保留最后空行 
#+end_src
** 括号匹配
#+begin_src emacs-lisp
  (electric-pair-mode t)                       ; 自动补全括号
  (add-hook 'prog-mode-hook #'show-paren-mode) ; 编程模式下，光标在括号上时高亮另一个括号
  (setq show-parens-delay 0)                   ; 设置括号匹配显示延迟为 0
#+end_src

彩色括号 (rainbow-delimiters)
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** 插件增强 ([[https://github.com/abo-abo/hydra?tab=readme-ov-file][hydra]])
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
  
  (use-package use-package-hydra
    :ensure t
    :after hydra) 
#+end_src
** 跳转 (avy)
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-c C-SPC" . avy-goto-char-timer)))
#+end_src
** 强化 C-e C-a 命令 (mwim)
#+begin_src emacs-lisp
(use-package mwim
  :ensure t
  :bind
  ("C-a" . mwim-beginning-of-code-or-line)
  ("C-e" . mwim-end-of-code-or-line))
#+end_src
** 增强 undo (undo-tree)
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init (global-undo-tree-mode)
    :after hydra
    :bind ("C-x C-h u" . hydra-undo-tree/body)
    :hydra (hydra-undo-tree (:hint nil)
    "
    _p_: undo  _n_: redo _s_: save _l_: load   "
    ("p"   undo-tree-undo)
    ("n"   undo-tree-redo)
    ("s"   undo-tree-save-history)
    ("l"   undo-tree-load-history)
    ("u"   undo-tree-visualize "visualize" :color blue)
    ("q"   nil "quit" :color blue)))
#+end_src
*** TODO 管理 undo-tree 临时文件
** TODO 多光标 (multiple-cursors)
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :after hydra
    :bind
    (("C-x C-h m" . hydra-multiple-cursors/body)
     ("C-S-<mouse-1>" . mc/toggle-cursor-on-click))
    :hydra (hydra-multiple-cursors
  		  (:hint nil)
  		  "
  Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Prev     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
   [_|_] Align with input CHAR       [Click] Cursor at point"
  		  ("l" mc/edit-lines :exit t)
  		  ("a" mc/mark-all-like-this :exit t)
  		  ("n" mc/mark-next-like-this)
  		  ("N" mc/skip-to-next-like-this)
  		  ("M-n" mc/unmark-next-like-this)
  		  ("p" mc/mark-previous-like-this)
  		  ("P" mc/skip-to-previous-like-this)
  		  ("M-p" mc/unmark-previous-like-this)
  		  ("|" mc/vertical-align)
  		  ("s" mc/mark-all-in-region-regexp :exit t)
  		  ("0" mc/insert-numbers :exit t)
  		  ("A" mc/insert-letters :exit t)
  		  ("<mouse-1>" mc/add-cursor-on-click)
  		  ;; Help with click recognition in this hydra
  		  ("<down-mouse-1>" ignore)
  		  ("<drag-mouse-1>" ignore)
  		  ("q" nil)))
#+end_src

* 补全
** 不区分大小写
#+begin_src emacs-lisp
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)
#+end_src
** Vert&co
参考配置 [[https://midirus.com/blog/from-ivy-to-vertico][From Ivy To Vert&co]]
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-count 20)  ;; limit to a fixed size
    :bind (:map vertico-map
                ;; Use page-up/down to scroll vertico buffer, like ivy does by default.
                ("<prior>" . 'vertico-scroll-down)
                ("<next>"  . 'vertico-scroll-up))
    :init
    ;; Activate vertico
    (vertico-mode))

  ;; Convenient path selection
  (use-package vertico-directory
    :after vertico
    :ensure nil  ;; no need to install, it comes with vertico
    :bind (:map vertico-map
                ("DEL" . vertico-directory-delete-char)))

  (use-package orderless
    :ensure t
    :custom
    ;; Activate orderless completion
    (completion-styles '(orderless basic))
    ;; Enable partial completion for file wildcard support
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package consult
    :ensure t
    :custom
    ;; Disable preview
    (consult-preview-key nil)
    :bind
    (("C-x b" . 'consult-buffer)    ;; Switch buffer, including recentf and bookmarks
     ("M-l"   . 'consult-git-grep)  ;; Search inside a project
     ("M-y"   . 'consult-yank-pop)  ;; Paste by selecting the kill-ring
     ("M-s"   . 'consult-line)      ;; Search current buffer, like swiper
     ))

  (use-package embark
    :ensure t
    :bind
    (("C-."   . embark-act)         ;; Begin the embark process
     ("C-;"   . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings))   ;; alternative for `describe-bindings'
    :config
    (use-package embark-consult)
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
#+end_src

** marginlia
minibuffer 信息增强
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :init (marginalia-mode)
  :bind (:map minibuffer-local-map
			  ("M-A" . marginalia-cycle)))
#+end_src

** TODO company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode)
    :config
    (setq company-minimum-prefix-length 3) ; 只需敲 1 个字母就开始进行自动补全
    (setq company-tooltip-align-annotations t)
    (setq company-idle-delay 0.0)
    (setq company-show-numbers t) ;; 给选项编号 (按快捷键 M-1、M-2 等等来进行选择).
    (setq company-selection-wrap-around t)
    (setq company-transformers '(company-sort-by-occurrence))) ; 根据选择的频率进行排序，读者如果不喜欢可以去掉

  (use-package company-box
    :ensure t
    :if window-system
    :hook (company-mode . company-box-mode))
#+end_src

** yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook
    (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all)
    ;; add company-yasnippet to company-backends
    (defun company-mode/backend-with-yas (backend)
      (if (and (listp backend) (member 'company-yasnippet backend))
  	    backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
    ;; unbind <TAB> completion
    (define-key yas-minor-mode-map [(tab)]        nil)
    (define-key yas-minor-mode-map (kbd "TAB")    nil)
    (define-key yas-minor-mode-map (kbd "<tab>")  nil)
    :bind
    (:map yas-minor-mode-map ("S-<tab>" . yas-expand)))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

* 键位绑定
#+begin_src emacs-lisp
  ;; 绑定常用帮助命令
  (global-set-key (kbd "C-h C-f") #'find-function)
  (global-set-key (kbd "C-h C-v") #'find-variable)
  (global-set-key (kbd "C-h C-k") #'find-function-on-key)

  ;; ibuffer
  (global-set-key (kbd "C-x C-b") #'ibuffer)

  ;; 刷新 buffer
  (global-set-key (kbd "<f5>") #'revert-buffer)

  (global-set-key (kbd "M-w") 'kill-region)              ; 交换 M-w 和 C-w，M-w 为剪切
(global-set-key (kbd "C-w") 'kill-ring-save)           ; 交换 M-w 和 C-w，C-w 为复制
(global-set-key (kbd "C-c '") 'comment-or-uncomment-region) ; 为选中的代码加注释/去注释
#+end_src

Faster move curesor
#+begin_src emacs-lisp
  ;; Faster move cursor
  (defun next-ten-lines()
    "Move cursor to next 10 lines."
    (interactive)
    (next-line 10))

  (defun previous-ten-lines()
    "Move cursor to previous 10 lines."
    (interactive)
    (previous-line 10))

  (global-set-key (kbd "M-n") 'next-ten-lines)            ; 光标向下移动 10 行
  (global-set-key (kbd "M-p") 'previous-ten-lines)        ; 光标向上移动 10 行
#+end_src

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-j"))
#+end_src

* 自定义功能
** 快速打开配置文件
#+begin_src emacs-lisp
  (defun my/open-config-file ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))

  (global-set-key (kbd "<f6>") #'my/open-config-file)
#+end_src

** 在资源管理器中打开文件
#+begin_src emacs-lisp
  (defun my/open-in-file-manager (target)
    "在系统的文件管理器中打开 TARGET 所在的目录。
  TARGET 可以是一个文件路径或一个目录路径。"
    ;; interactive 规则 "F" 可以智能处理文件和目录，更具通用性
    (interactive "FOpen in file manager: ")
    (let ((directory-to-open
           ;; expand-file-name 确保路径是绝对路径
           ;; file-name-directory 获取目标所在的目录
           ;; 如果目标本身就是目录, 则直接使用该目录
           (file-name-directory (expand-file-name target))))
      (pcase system-type
        ;; Windows: 使用原生API，最稳定可靠，无需处理编码和路径分隔符
        ('windows-nt
         (w32-shell-execute "open" directory-to-open))
        ;; macOS: 使用 open 命令
        ('darwin
         (call-process "open" nil 0 nil directory-to-open))
        ;; 其他 (主要是 Linux): 使用 xdg-open
        (_
         (call-process "xdg-open" nil 0 nil directory-to-open)))))
#+end_src

在系统的文件管理器中打开当前文件所在的目录
#+begin_src emacs-lisp
  ;; 提供一个独立的命令来打开当前目录
  (defun my/open-current-directory-externally ()
    "在系统的文件管理器中打开当前文件所在的目录。"
    (interactive)
    (my/open-in-file-manager default-directory))

  (global-set-key (kbd "<f8>") #'my/open-current-directory-externally)
#+end_src

* 其它
** windows 临时文件夹设置
防止 Windows 用 ~<user name>~1~ 命名家目录, 用于修复 ~org-preview-latex~ 的 bug
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq temporary-file-directory
  	(concat (replace-regexp-in-string "\\\\" "/" (getenv "LOCALAPPDATA")) "/Temp")))
#+end_src
* TODO Latex
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Format math as a Latex string with Calc
#+begin_src emacs-lisp
  (defun my/latex-math-from-calc ()
    "Evaluate `calc' on the contents of line at point."
    (interactive)
    (cond ((region-active-p)
           (let* ((beg (region-beginning))
                  (end (region-end))
                  (string (buffer-substring-no-properties beg end)))
             (kill-region beg end)
             (insert (calc-eval `(,string calc-language latex
                                          calc-prefer-frac t
                                          calc-angle-mode rad)))))
          (t (let ((l (thing-at-point 'line)))
               (end-of-line 1) (kill-line 0) 
               (insert (calc-eval `(,l
                                    calc-language latex
                                    calc-prefer-frac t
                                    calc-angle-mode rad)))))))
#+end_src

#+begin_src emacs-lisp
  (use-package latex
    :ensure auctex
    :hook ((LaTeX-mode . prettify-symbols-mode))
    :bind (:map LaTeX-mode-map
                ("C-S-e" . my/latex-math-from-calc))
    :config
    (setq TeX-auto-save t
  	    TeX-parse-self t
  	    TeX-save-query nil
  	    TeX-PDF-mode t
  	    TeX-command-default "LatexMk"
  	    TeX-source-correlate-mode t
  	    TeX-source-correlate-start-server t
  	    prettify-symbols-unprettify-at-point t)
    
    ;; PDF 查看器：SumatraPDF
    (setq TeX-view-program-selection '((output-pdf "SumatraPDF"))
          TeX-view-program-list
          `(("SumatraPDF"
    	       (,(concat "\"" (replace-regexp-in-string "\\\\" "/" (getenv "LOCALAPPDATA"))
                       "/SumatraPDF/SumatraPDF.exe\" -reuse-instance")
              (mode-io-correlate " -forward-search %b %n ") " %o")))))
#+end_src

** CDLatex settings
#+begin_src emacs-lisp
    ;; CDLatex settings
    (use-package cdlatex
      :ensure t
      :hook (LaTeX-mode . turn-on-cdlatex)
      :bind (:map cdlatex-mode-map 
                  ("<tab>" . cdlatex-tab)))
#+end_src

** Yasnippet settings
Function that tries to autoexpand YaSnippets
#+begin_src emacs-lisp
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))
#+end_src

#+begin_src emacs-lisp :tangle no
  ;; Yasnippet settings
  (use-package yasnippet
    :ensure t
    :hook ((LaTeX-mode . yas-minor-mode)
           (post-self-insert . my/yas-try-expanding-auto-snippets))
    :config
    (setq yas-snippet-dirs (concat user-emacs-directory "snippets/"))
    (use-package warnings
      :config
      (cl-pushnew '(yasnippet backquote-change)
                  warning-suppress-types
                  :test 'equal))

    (setq yas-triggers-in-field t))
#+end_src

#+begin_src emacs-lisp
    ;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
    ;; fields
    (use-package cdlatex
      :hook ((cdlatex-tab . yas-expand)
             (cdlatex-tab . cdlatex-in-yas-field))
      :config
      (use-package yasnippet
        :bind (:map yas-keymap
                    ("<tab>" . yas-next-field-or-cdlatex)
                    ("TAB" . yas-next-field-or-cdlatex))
        :config
        (defun cdlatex-in-yas-field ()
          ;; Check if we're at the end of the Yas field
          (when-let* ((_ (overlayp yas--active-field-overlay))
                      (end (overlay-end yas--active-field-overlay)))
            (if (>= (point) end)
                ;; Call yas-next-field if cdlatex can't expand here
                (let ((s (thing-at-point 'sexp)))
                  (unless (and s (assoc (substring-no-properties s)
                                        cdlatex-command-alist-comb))
                    (yas-next-field-or-maybe-expand)
                    t))
              ;; otherwise expand and jump to the correct location
              (let (cdlatex-tab-hook minp)
                (setq minp
                      (min (save-excursion (cdlatex-tab)
                                           (point))
                           (overlay-end yas--active-field-overlay)))
                (goto-char minp) t))))

        (defun yas-next-field-or-cdlatex nil
          (interactive)
          "Jump to the next Yas field correctly with cdlatex active."
          (if
              (or (bound-and-true-p cdlatex-mode)
                  (bound-and-true-p org-cdlatex-mode))
              (cdlatex-tab)
            (yas-next-field-or-maybe-expand)))))

 ;;(straight-use-package
  ;; '(lazytab :type git :host github :repo "karthink/lazytab"))

  ;; Array/tabular input with org-tables and cdlatex 
  (use-package org-table
    :after cdlatex
    :bind (:map orgtbl-mode-map
                ("<tab>" . lazytab-org-table-next-field-maybe)
                ("TAB" . lazytab-org-table-next-field-maybe))
    :init
    (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)
    ;; Tabular environments using cdlatex
    (add-to-list 'cdlatex-command-alist '("smat" "Insert smallmatrix env"
                                          "\\left( \\begin{smallmatrix} ? \\end{smallmatrix} \\right)"
                                          lazytab-position-cursor-and-edit
                                          nil nil t))
    (add-to-list 'cdlatex-command-alist '("bmat" "Insert bmatrix env"
                                          "\\begin{bmatrix} ? \\end{bmatrix}"
                                          lazytab-position-cursor-and-edit
                                          nil nil t))
    (add-to-list 'cdlatex-command-alist '("pmat" "Insert pmatrix env"
                                          "\\begin{pmatrix} ? \\end{pmatrix}"
                                          lazytab-position-cursor-and-edit
                                          nil nil t))
    (add-to-list 'cdlatex-command-alist '("tbl" "Insert table"
                                          "\\begin{table}\n\\centering ? \\caption{}\n\\end{table}\n"
                                          lazytab-position-cursor-and-edit
                                          nil t nil)))
#+end_src

#+begin_src emacs-lisp
  ;; Auto compile on save
  (defun my/latex-auto-compile ()
    "Automatically compile LaTeX file with latexmk after saving."
    (when (eq major-mode 'latex-mode)
      (TeX-save-document (TeX-master-file))
      (TeX-command "LatexMk" 'TeX-master-file -1)))

  (add-hook 'latex-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my/latex-auto-compile nil 'local)))
#+end_src

* TODO Org Mode
** org 文件目录
#+begin_src emacs-lisp
  (setq org-directory (expand-file-name "Projects/org/" my-cloud-dir))
#+end_src
** 增强工具包
#+begin_src emacs-lisp
  (use-package org-contrib
    :ensure t
    :after org)
#+end_src
** 启用简易模板
#+begin_src emacs-lisp
  ;; 启用 Org Mode 的简易模板
  (require 'org-tempo)

  ;; 在 Org Mode 中禁用左尖括号的自动配对
  (add-hook 'org-mode-hook
  	  (lambda ()
  	    (setq-local electric-pair-inhibit-predicate
  			`(lambda (c)
  			   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
** org-agenda
#+begin_src emacs-lisp
  (setq org-agenda-files
        (directory-files-recursively
         org-directory
         "\\.org\\'"))
#+end_src
** org-todo
#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!/!)")
                (sequence "WAITING(w@/!)" "SOMEDAY(S)" "|" "CANCELLED(c@/!)" "MEETING(m)" "PHONE(p)"))))

  (require 'org-checklist)
  (setq org-log-into-drawer t)
#+end_src
** org-capture
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("t" "Todo" entry (file+headline ,(expand-file-name "inbox.org" org-directory) "Workspace")
           "* TODO [#B] %?\n  %i\n %U"
           :empty-lines 1)))
#+end_src
* TODO magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* TODO 拼写检查
